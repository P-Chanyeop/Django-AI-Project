"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
# settings.py는 장고 프레임워크의 프로젝트 환경 설정하는 파일이다.
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR은 settings.py 파일이 위치한 폴더가 위치한 폴더, 즉 프로젝트 폴더를 가리킨다.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 장고 프로젝트를 생성하면, 장고 보안 기능에 활용되는 값으로,
# 이 상태라면 github의 공개 저장소에 SECRET_KEY를 그대로 노출한 상태로 settings.py 파일을 함께 push 하게되므로
# SECRET_KEY를 코드에서 분리해야 한다.
SECRET_KEY = 'django-insecure-$h-^lx&tgn#-@_ze%^7s(f50&-lkn)siv81_pkwpbh0wdg$t(@'

# SECURITY WARNING: don't run with debug turned on in production!
# 개발모드 설정
# 기본적으로 개발 모드는 DEBUG = True 로 설정되어 있다. 운영 모드일 경우 False로 설정해야 한다.
DEBUG = True

# 장고 서버를 외부에 서비스하려면 settings.py 파일의 ALLOWED_HOSTS 항목을 반드시 설정해야 한다.
# ALLOWED_HOSTS는 보안과 관련된 항목으로 장고 서버가 실행 가능한 호스트를 등록하는 설정 항목이다.
ALLOWED_HOSTS = []


# Application definition
# 앱을 생성하고 추가하려면 장고가 경로를 찾을 수 있게
# 장고 프로젝트 이름/settings.py로 이동하여 INSTALLED_APPS에 생성한 앱 이름을 추가 해야함.
# 앱이 추가될 때마다 INSTALLED_APPS에 앱 이름을 등록해야 한다.
# 설치된 앱은 apps.py의 경로 설정을 따라간다.
# 추가한 파일로 들어가서 app.py에 보면 class 이름이 PyboConfig라고 명시되어 있다.
INSTALLED_APPS = [
    'common.apps.CommonConfig',
    'pybo.apps.PyboConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# http 요청 / 응답 처리 중간에서 작동하는 시스템이다.
# DJango는 http 요청이 들어오면 미들웨어를 거쳐서 해당 URL에 등록되어 있는 뷰로 연결해주고, http 응답 역시 미들웨어를 거쳐서 내보낸다.
# http request가 들어오면 위에서부터 아래로 미들웨어를 적용시킨다.
# http response가 나갈 때 아래서부터 위로 미들웨어를 적용시킨다.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
# 기준이 되는 URL파일의 경로를 의미
# 실제 이 경로가 바로 우리가 프로젝트를 생성했을 때 만들어지는 config의 urls.py라는 것을 알 수 있다.
# 특정 URL에 요청이 발생했을때, Django에서는 ROOT_RULCONF를 보고 urls.py를 로드한다. 그 이후 매칭되는 url을 찾는다.
ROOT_URLCONF = 'config.urls'


# 장고 MVT 패턴에서 template은 MVC 패턴의 View와 비슷한 기능. template은 데이터를 사용자에게 보여주는 컴포넌트이다.
# 이러한 template의 경로나 정보를 설정하는 곳이 TEMPLATES 이다.
# 프로젝트 내에서 templates라는 폴더를 생성하고 'DIRS'에 기본 BASE_DIR를 templates경로로 설정합니다.
# templates 내에 사용할 html 파일을 만듭니다.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
# WSGI application 설정.
# 여기서 config.wsgi.application은 현재 장고 어플리케이션을 뜻한다.
WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
# 데이터베이스 정의 및 설정
# 장고를 설치하면 기본적으로 sqlite도 설치되어 진다. 이러한 sqlite DB 정보를 설정
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
# 의미 그대로 비밀번호의 복잡도에 관한 내용이 들어있다.
# python manage.py createsuperuser 명령을 통해 관리자 계정을 생성할 때 만들어지는 계정의 비밀번호가 아래의 규칙을 따른다.
AUTH_PASSWORD_VALIDATORS = [
    {
        # username과 비밀번호가 유사한지 확인
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # 비밀번호의 최소 자리수(default)를 지정
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # common 한 비밀번호(ex. qwer) 1000개의 리스트와 비교
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # 전부 숫자인 비밀번호는 사용하지 못하게 한다.
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
# 언어 및 시간 설정
LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

# 장고의 번역 시스템 활성화 여부를 나타낸다.
# 참고로 I18N은 국제화(Internationalization)의 약자이다.
USE_I18N = True

# true로 하면 장고가 자동으로 TIME에 따라 시간 계산
# 한국시간으로 계산하기 위함
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# 장고에서 image, JavaScript, CSS 등 과 같은 파일을 static file 이라고 한다.
# 장고는 이러한 정적(static) 파일을 관리하고, URL 설정을 한다.
# STATIC_URL은 프로젝트의 static 파일 경로로 지정하고, 장고가 정적파일을 찾을 수 있는 기본설정을 STATICFILES_DIRS로 정의한다.
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    BASE_DIR / 'static',
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

# 장고가 제공하는 모델 필드 옵션과 필드 유형중 자신이 사용하고자 하는 옵션을 명시.
# AutoField 옵션은 ID로 사용가능한 자동으로 증가하는 Integer필드 이다.
# 보통 직접 사용할 필요는 없으며 모델의 기본키 필드는 별도로 지정하지 않으면 자동으로 추가된다.
# BigAutoField는 AutoField와 매우 유사한 64bit 정수이다. 다만 범위가 매우 넓다. (1 ~ 9223372036854775807의 범위를 가짐)
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 로그인 성공후 이동하는 URL
LOGIN_REDIRECT_URL = '/'

# 로그아웃시 이동하는 URL
LOGOUT_REDIRECT_URL = '/'